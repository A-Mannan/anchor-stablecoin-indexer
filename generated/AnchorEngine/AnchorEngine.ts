// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt,
} from "@graphprotocol/graph-ts";

export class BatchRedeemedCollateral extends ethereum.Event {
  get params(): BatchRedeemedCollateral__Params {
    return new BatchRedeemedCollateral__Params(this);
  }
}

export class BatchRedeemedCollateral__Params {
  _event: BatchRedeemedCollateral;

  constructor(event: BatchRedeemedCollateral) {
    this._event = event;
  }

  get caller(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get anchorUSDAmount(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get etherAmount(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get timestamp(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class Burn extends ethereum.Event {
  get params(): Burn__Params {
    return new Burn__Params(this);
  }
}

export class Burn__Params {
  _event: Burn;

  constructor(event: Burn) {
    this._event = event;
  }

  get sponsor(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get onBehalfOf(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get timestamp(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class DepositEther extends ethereum.Event {
  get params(): DepositEther__Params {
    return new DepositEther__Params(this);
  }
}

export class DepositEther__Params {
  _event: DepositEther;

  constructor(event: DepositEther) {
    this._event = event;
  }

  get sponsor(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get onBehalfOf(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get timestamp(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class FeeDistribution extends ethereum.Event {
  get params(): FeeDistribution__Params {
    return new FeeDistribution__Params(this);
  }
}

export class FeeDistribution__Params {
  _event: FeeDistribution;

  constructor(event: FeeDistribution) {
    this._event = event;
  }

  get feeAddress(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get feeAmount(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get timestamp(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class FeeShareChanged extends ethereum.Event {
  get params(): FeeShareChanged__Params {
    return new FeeShareChanged__Params(this);
  }
}

export class FeeShareChanged__Params {
  _event: FeeShareChanged;

  constructor(event: FeeShareChanged) {
    this._event = event;
  }

  get newFeeShareBps(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }
}

export class GovernanceAuthorityTransfer extends ethereum.Event {
  get params(): GovernanceAuthorityTransfer__Params {
    return new GovernanceAuthorityTransfer__Params(this);
  }
}

export class GovernanceAuthorityTransfer__Params {
  _event: GovernanceAuthorityTransfer;

  constructor(event: GovernanceAuthorityTransfer) {
    this._event = event;
  }

  get newGovernance(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class KeeperRateChanged extends ethereum.Event {
  get params(): KeeperRateChanged__Params {
    return new KeeperRateChanged__Params(this);
  }
}

export class KeeperRateChanged__Params {
  _event: KeeperRateChanged;

  constructor(event: KeeperRateChanged) {
    this._event = event;
  }

  get newSlippage(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }
}

export class LSDValueCaptured extends ethereum.Event {
  get params(): LSDValueCaptured__Params {
    return new LSDValueCaptured__Params(this);
  }
}

export class LSDValueCaptured__Params {
  _event: LSDValueCaptured;

  constructor(event: LSDValueCaptured) {
    this._event = event;
  }

  get stETHAdded(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get payoutEUSD(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get discountRate(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get timestamp(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class LiquidationRecord extends ethereum.Event {
  get params(): LiquidationRecord__Params {
    return new LiquidationRecord__Params(this);
  }
}

export class LiquidationRecord__Params {
  _event: LiquidationRecord;

  constructor(event: LiquidationRecord) {
    this._event = event;
  }

  get provider(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get keeper(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get onBehalfOf(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get anchorUSDAmount(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get LiquidateEtherAmount(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }

  get keeperReward(): BigInt {
    return this._event.parameters[5].value.toBigInt();
  }

  get timestamp(): BigInt {
    return this._event.parameters[6].value.toBigInt();
  }
}

export class MinCollateralRatioChanged extends ethereum.Event {
  get params(): MinCollateralRatioChanged__Params {
    return new MinCollateralRatioChanged__Params(this);
  }
}

export class MinCollateralRatioChanged__Params {
  _event: MinCollateralRatioChanged;

  constructor(event: MinCollateralRatioChanged) {
    this._event = event;
  }

  get newRatio(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }
}

export class Mint extends ethereum.Event {
  get params(): Mint__Params {
    return new Mint__Params(this);
  }
}

export class Mint__Params {
  _event: Mint;

  constructor(event: Mint) {
    this._event = event;
  }

  get sponsor(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get onBehalfOf(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get timestamp(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class RedeemedCollateral extends ethereum.Event {
  get params(): RedeemedCollateral__Params {
    return new RedeemedCollateral__Params(this);
  }
}

export class RedeemedCollateral__Params {
  _event: RedeemedCollateral;

  constructor(event: RedeemedCollateral) {
    this._event = event;
  }

  get caller(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get provider(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get anchorUSDAmount(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get etherAmount(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get timestamp(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }
}

export class RedemptionFeeChanged extends ethereum.Event {
  get params(): RedemptionFeeChanged__Params {
    return new RedemptionFeeChanged__Params(this);
  }
}

export class RedemptionFeeChanged__Params {
  _event: RedemptionFeeChanged;

  constructor(event: RedemptionFeeChanged) {
    this._event = event;
  }

  get newSlippage(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }
}

export class RedemptionProviderRegistered extends ethereum.Event {
  get params(): RedemptionProviderRegistered__Params {
    return new RedemptionProviderRegistered__Params(this);
  }
}

export class RedemptionProviderRegistered__Params {
  _event: RedemptionProviderRegistered;

  constructor(event: RedemptionProviderRegistered) {
    this._event = event;
  }

  get user(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get feeRate(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get amount(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class RedemptionProviderRemoved extends ethereum.Event {
  get params(): RedemptionProviderRemoved__Params {
    return new RedemptionProviderRemoved__Params(this);
  }
}

export class RedemptionProviderRemoved__Params {
  _event: RedemptionProviderRemoved;

  constructor(event: RedemptionProviderRemoved) {
    this._event = event;
  }

  get user(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class WithdrawEther extends ethereum.Event {
  get params(): WithdrawEther__Params {
    return new WithdrawEther__Params(this);
  }
}

export class WithdrawEther__Params {
  _event: WithdrawEther;

  constructor(event: WithdrawEther) {
    this._event = event;
  }

  get sponsor(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get onBehalfOf(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get timestamp(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class AnchorEngine__redemptionOffersResult {
  value0: BigInt;
  value1: BigInt;

  constructor(value0: BigInt, value1: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    return map;
  }

  getFeeRate(): BigInt {
    return this.value0;
  }

  getAmount(): BigInt {
    return this.value1;
  }
}

export class AnchorEngine__userPositionsResult {
  value0: BigInt;
  value1: BigInt;

  constructor(value0: BigInt, value1: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    return map;
  }

  getDebt(): BigInt {
    return this.value0;
  }

  getCollateral(): BigInt {
    return this.value1;
  }
}

export class AnchorEngine extends ethereum.SmartContract {
  static bind(address: Address): AnchorEngine {
    return new AnchorEngine("AnchorEngine", address);
  }

  INITIAL_MIN_DEPOSIT_AMOUNT(): BigInt {
    let result = super.call(
      "INITIAL_MIN_DEPOSIT_AMOUNT",
      "INITIAL_MIN_DEPOSIT_AMOUNT():(uint256)",
      [],
    );

    return result[0].toBigInt();
  }

  try_INITIAL_MIN_DEPOSIT_AMOUNT(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "INITIAL_MIN_DEPOSIT_AMOUNT",
      "INITIAL_MIN_DEPOSIT_AMOUNT():(uint256)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  MAX_FEE_SHARE_BPS(): BigInt {
    let result = super.call(
      "MAX_FEE_SHARE_BPS",
      "MAX_FEE_SHARE_BPS():(uint256)",
      [],
    );

    return result[0].toBigInt();
  }

  try_MAX_FEE_SHARE_BPS(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "MAX_FEE_SHARE_BPS",
      "MAX_FEE_SHARE_BPS():(uint256)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  MAX_KEEPERS_RATE(): BigInt {
    let result = super.call(
      "MAX_KEEPERS_RATE",
      "MAX_KEEPERS_RATE():(uint256)",
      [],
    );

    return result[0].toBigInt();
  }

  try_MAX_KEEPERS_RATE(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "MAX_KEEPERS_RATE",
      "MAX_KEEPERS_RATE():(uint256)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  MAX_REDEMPTION_FEE_RATE(): BigInt {
    let result = super.call(
      "MAX_REDEMPTION_FEE_RATE",
      "MAX_REDEMPTION_FEE_RATE():(uint256)",
      [],
    );

    return result[0].toBigInt();
  }

  try_MAX_REDEMPTION_FEE_RATE(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "MAX_REDEMPTION_FEE_RATE",
      "MAX_REDEMPTION_FEE_RATE():(uint256)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  MIN_COLL_RATIO_FLOOR(): BigInt {
    let result = super.call(
      "MIN_COLL_RATIO_FLOOR",
      "MIN_COLL_RATIO_FLOOR():(uint256)",
      [],
    );

    return result[0].toBigInt();
  }

  try_MIN_COLL_RATIO_FLOOR(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "MIN_COLL_RATIO_FLOOR",
      "MIN_COLL_RATIO_FLOOR():(uint256)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  anchorUSD(): Address {
    let result = super.call("anchorUSD", "anchorUSD():(address)", []);

    return result[0].toAddress();
  }

  try_anchorUSD(): ethereum.CallResult<Address> {
    let result = super.tryCall("anchorUSD", "anchorUSD():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  feeShareBps(): BigInt {
    let result = super.call("feeShareBps", "feeShareBps():(uint256)", []);

    return result[0].toBigInt();
  }

  try_feeShareBps(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("feeShareBps", "feeShareBps():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  fetchEthPriceInUsd(): BigInt {
    let result = super.call(
      "fetchEthPriceInUsd",
      "fetchEthPriceInUsd():(uint256)",
      [],
    );

    return result[0].toBigInt();
  }

  try_fetchEthPriceInUsd(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "fetchEthPriceInUsd",
      "fetchEthPriceInUsd():(uint256)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getAllBorrowers(): Array<Address> {
    let result = super.call(
      "getAllBorrowers",
      "getAllBorrowers():(address[])",
      [],
    );

    return result[0].toAddressArray();
  }

  try_getAllBorrowers(): ethereum.CallResult<Array<Address>> {
    let result = super.tryCall(
      "getAllBorrowers",
      "getAllBorrowers():(address[])",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddressArray());
  }

  getAllRedemptionProviders(): Array<Address> {
    let result = super.call(
      "getAllRedemptionProviders",
      "getAllRedemptionProviders():(address[])",
      [],
    );

    return result[0].toAddressArray();
  }

  try_getAllRedemptionProviders(): ethereum.CallResult<Array<Address>> {
    let result = super.tryCall(
      "getAllRedemptionProviders",
      "getAllRedemptionProviders():(address[])",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddressArray());
  }

  getBorrowerAtIndex(index: BigInt): Address {
    let result = super.call(
      "getBorrowerAtIndex",
      "getBorrowerAtIndex(uint256):(address)",
      [ethereum.Value.fromUnsignedBigInt(index)],
    );

    return result[0].toAddress();
  }

  try_getBorrowerAtIndex(index: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "getBorrowerAtIndex",
      "getBorrowerAtIndex(uint256):(address)",
      [ethereum.Value.fromUnsignedBigInt(index)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getBorrowersCount(): BigInt {
    let result = super.call(
      "getBorrowersCount",
      "getBorrowersCount():(uint256)",
      [],
    );

    return result[0].toBigInt();
  }

  try_getBorrowersCount(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getBorrowersCount",
      "getBorrowersCount():(uint256)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getDutchAuctionDiscountPrice(): BigInt {
    let result = super.call(
      "getDutchAuctionDiscountPrice",
      "getDutchAuctionDiscountPrice():(uint256)",
      [],
    );

    return result[0].toBigInt();
  }

  try_getDutchAuctionDiscountPrice(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getDutchAuctionDiscountPrice",
      "getDutchAuctionDiscountPrice():(uint256)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getRedemptionProviderAtIndex(index: BigInt): Address {
    let result = super.call(
      "getRedemptionProviderAtIndex",
      "getRedemptionProviderAtIndex(uint256):(address)",
      [ethereum.Value.fromUnsignedBigInt(index)],
    );

    return result[0].toAddress();
  }

  try_getRedemptionProviderAtIndex(
    index: BigInt,
  ): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "getRedemptionProviderAtIndex",
      "getRedemptionProviderAtIndex(uint256):(address)",
      [ethereum.Value.fromUnsignedBigInt(index)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getRedemptionProvidersCount(): BigInt {
    let result = super.call(
      "getRedemptionProvidersCount",
      "getRedemptionProvidersCount():(uint256)",
      [],
    );

    return result[0].toBigInt();
  }

  try_getRedemptionProvidersCount(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getRedemptionProvidersCount",
      "getRedemptionProvidersCount():(uint256)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  governance(): Address {
    let result = super.call("governance", "governance():(address)", []);

    return result[0].toAddress();
  }

  try_governance(): ethereum.CallResult<Address> {
    let result = super.tryCall("governance", "governance():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  isBorrower(_user: Address): boolean {
    let result = super.call("isBorrower", "isBorrower(address):(bool)", [
      ethereum.Value.fromAddress(_user),
    ]);

    return result[0].toBoolean();
  }

  try_isBorrower(_user: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall("isBorrower", "isBorrower(address):(bool)", [
      ethereum.Value.fromAddress(_user),
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  isRedemptionProvider(_user: Address): boolean {
    let result = super.call(
      "isRedemptionProvider",
      "isRedemptionProvider(address):(bool)",
      [ethereum.Value.fromAddress(_user)],
    );

    return result[0].toBoolean();
  }

  try_isRedemptionProvider(_user: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "isRedemptionProvider",
      "isRedemptionProvider(address):(bool)",
      [ethereum.Value.fromAddress(_user)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  keeperRate(): i32 {
    let result = super.call("keeperRate", "keeperRate():(uint8)", []);

    return result[0].toI32();
  }

  try_keeperRate(): ethereum.CallResult<i32> {
    let result = super.tryCall("keeperRate", "keeperRate():(uint8)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toI32());
  }

  lidoRebaseTime(): BigInt {
    let result = super.call("lidoRebaseTime", "lidoRebaseTime():(uint256)", []);

    return result[0].toBigInt();
  }

  try_lidoRebaseTime(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "lidoRebaseTime",
      "lidoRebaseTime():(uint256)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  minCollateralRatio(): BigInt {
    let result = super.call(
      "minCollateralRatio",
      "minCollateralRatio():(uint256)",
      [],
    );

    return result[0].toBigInt();
  }

  try_minCollateralRatio(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "minCollateralRatio",
      "minCollateralRatio():(uint256)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  redemptionOffers(
    redemptionProvider: Address,
  ): AnchorEngine__redemptionOffersResult {
    let result = super.call(
      "redemptionOffers",
      "redemptionOffers(address):(uint256,uint256)",
      [ethereum.Value.fromAddress(redemptionProvider)],
    );

    return new AnchorEngine__redemptionOffersResult(
      result[0].toBigInt(),
      result[1].toBigInt(),
    );
  }

  try_redemptionOffers(
    redemptionProvider: Address,
  ): ethereum.CallResult<AnchorEngine__redemptionOffersResult> {
    let result = super.tryCall(
      "redemptionOffers",
      "redemptionOffers(address):(uint256,uint256)",
      [ethereum.Value.fromAddress(redemptionProvider)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new AnchorEngine__redemptionOffersResult(
        value[0].toBigInt(),
        value[1].toBigInt(),
      ),
    );
  }

  totalAnchorUSDCirculation(): BigInt {
    let result = super.call(
      "totalAnchorUSDCirculation",
      "totalAnchorUSDCirculation():(uint256)",
      [],
    );

    return result[0].toBigInt();
  }

  try_totalAnchorUSDCirculation(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "totalAnchorUSDCirculation",
      "totalAnchorUSDCirculation():(uint256)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  totalDepositedEther(): BigInt {
    let result = super.call(
      "totalDepositedEther",
      "totalDepositedEther():(uint256)",
      [],
    );

    return result[0].toBigInt();
  }

  try_totalDepositedEther(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "totalDepositedEther",
      "totalDepositedEther():(uint256)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  userPositions(user: Address): AnchorEngine__userPositionsResult {
    let result = super.call(
      "userPositions",
      "userPositions(address):(uint256,uint256)",
      [ethereum.Value.fromAddress(user)],
    );

    return new AnchorEngine__userPositionsResult(
      result[0].toBigInt(),
      result[1].toBigInt(),
    );
  }

  try_userPositions(
    user: Address,
  ): ethereum.CallResult<AnchorEngine__userPositionsResult> {
    let result = super.tryCall(
      "userPositions",
      "userPositions(address):(uint256,uint256)",
      [ethereum.Value.fromAddress(user)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new AnchorEngine__userPositionsResult(
        value[0].toBigInt(),
        value[1].toBigInt(),
      ),
    );
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get _stETHAddress(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _priceFeedAddress(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get _anchorUSDAddress(): Address {
    return this._call.inputValues[2].value.toAddress();
  }

  get _minCollateralRatio(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class AuctionExcessYieldCall extends ethereum.Call {
  get inputs(): AuctionExcessYieldCall__Inputs {
    return new AuctionExcessYieldCall__Inputs(this);
  }

  get outputs(): AuctionExcessYieldCall__Outputs {
    return new AuctionExcessYieldCall__Outputs(this);
  }
}

export class AuctionExcessYieldCall__Inputs {
  _call: AuctionExcessYieldCall;

  constructor(call: AuctionExcessYieldCall) {
    this._call = call;
  }

  get stETHAmount(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class AuctionExcessYieldCall__Outputs {
  _call: AuctionExcessYieldCall;

  constructor(call: AuctionExcessYieldCall) {
    this._call = call;
  }
}

export class BatchRedeemCollateralCall extends ethereum.Call {
  get inputs(): BatchRedeemCollateralCall__Inputs {
    return new BatchRedeemCollateralCall__Inputs(this);
  }

  get outputs(): BatchRedeemCollateralCall__Outputs {
    return new BatchRedeemCollateralCall__Outputs(this);
  }
}

export class BatchRedeemCollateralCall__Inputs {
  _call: BatchRedeemCollateralCall;

  constructor(call: BatchRedeemCollateralCall) {
    this._call = call;
  }

  get providers(): Array<Address> {
    return this._call.inputValues[0].value.toAddressArray();
  }

  get amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get minEtherAmount(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class BatchRedeemCollateralCall__Outputs {
  _call: BatchRedeemCollateralCall;

  constructor(call: BatchRedeemCollateralCall) {
    this._call = call;
  }
}

export class BecomeRedemptionProviderCall extends ethereum.Call {
  get inputs(): BecomeRedemptionProviderCall__Inputs {
    return new BecomeRedemptionProviderCall__Inputs(this);
  }

  get outputs(): BecomeRedemptionProviderCall__Outputs {
    return new BecomeRedemptionProviderCall__Outputs(this);
  }
}

export class BecomeRedemptionProviderCall__Inputs {
  _call: BecomeRedemptionProviderCall;

  constructor(call: BecomeRedemptionProviderCall) {
    this._call = call;
  }

  get _feeRate(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class BecomeRedemptionProviderCall__Outputs {
  _call: BecomeRedemptionProviderCall;

  constructor(call: BecomeRedemptionProviderCall) {
    this._call = call;
  }
}

export class DepositEtherToMintCall extends ethereum.Call {
  get inputs(): DepositEtherToMintCall__Inputs {
    return new DepositEtherToMintCall__Inputs(this);
  }

  get outputs(): DepositEtherToMintCall__Outputs {
    return new DepositEtherToMintCall__Outputs(this);
  }
}

export class DepositEtherToMintCall__Inputs {
  _call: DepositEtherToMintCall;

  constructor(call: DepositEtherToMintCall) {
    this._call = call;
  }

  get onBehalfOf(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get mintAmount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class DepositEtherToMintCall__Outputs {
  _call: DepositEtherToMintCall;

  constructor(call: DepositEtherToMintCall) {
    this._call = call;
  }
}

export class DepositStETHToMintCall extends ethereum.Call {
  get inputs(): DepositStETHToMintCall__Inputs {
    return new DepositStETHToMintCall__Inputs(this);
  }

  get outputs(): DepositStETHToMintCall__Outputs {
    return new DepositStETHToMintCall__Outputs(this);
  }
}

export class DepositStETHToMintCall__Inputs {
  _call: DepositStETHToMintCall;

  constructor(call: DepositStETHToMintCall) {
    this._call = call;
  }

  get onBehalfOf(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get stETHamount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get mintAmount(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class DepositStETHToMintCall__Outputs {
  _call: DepositStETHToMintCall;

  constructor(call: DepositStETHToMintCall) {
    this._call = call;
  }
}

export class LiquidatePositionCall extends ethereum.Call {
  get inputs(): LiquidatePositionCall__Inputs {
    return new LiquidatePositionCall__Inputs(this);
  }

  get outputs(): LiquidatePositionCall__Outputs {
    return new LiquidatePositionCall__Outputs(this);
  }
}

export class LiquidatePositionCall__Inputs {
  _call: LiquidatePositionCall;

  constructor(call: LiquidatePositionCall) {
    this._call = call;
  }

  get provider(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get onBehalfOf(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get debtToOffset(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class LiquidatePositionCall__Outputs {
  _call: LiquidatePositionCall;

  constructor(call: LiquidatePositionCall) {
    this._call = call;
  }
}

export class MintCall extends ethereum.Call {
  get inputs(): MintCall__Inputs {
    return new MintCall__Inputs(this);
  }

  get outputs(): MintCall__Outputs {
    return new MintCall__Outputs(this);
  }
}

export class MintCall__Inputs {
  _call: MintCall;

  constructor(call: MintCall) {
    this._call = call;
  }

  get onBehalfOf(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class MintCall__Outputs {
  _call: MintCall;

  constructor(call: MintCall) {
    this._call = call;
  }
}

export class RedeemCollateralCall extends ethereum.Call {
  get inputs(): RedeemCollateralCall__Inputs {
    return new RedeemCollateralCall__Inputs(this);
  }

  get outputs(): RedeemCollateralCall__Outputs {
    return new RedeemCollateralCall__Outputs(this);
  }
}

export class RedeemCollateralCall__Inputs {
  _call: RedeemCollateralCall;

  constructor(call: RedeemCollateralCall) {
    this._call = call;
  }

  get provider(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get anchorUSDAmount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get minEtherAmount(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class RedeemCollateralCall__Outputs {
  _call: RedeemCollateralCall;

  constructor(call: RedeemCollateralCall) {
    this._call = call;
  }
}

export class RemoveRedemptionProviderCall extends ethereum.Call {
  get inputs(): RemoveRedemptionProviderCall__Inputs {
    return new RemoveRedemptionProviderCall__Inputs(this);
  }

  get outputs(): RemoveRedemptionProviderCall__Outputs {
    return new RemoveRedemptionProviderCall__Outputs(this);
  }
}

export class RemoveRedemptionProviderCall__Inputs {
  _call: RemoveRedemptionProviderCall;

  constructor(call: RemoveRedemptionProviderCall) {
    this._call = call;
  }
}

export class RemoveRedemptionProviderCall__Outputs {
  _call: RemoveRedemptionProviderCall;

  constructor(call: RemoveRedemptionProviderCall) {
    this._call = call;
  }
}

export class RepayCall extends ethereum.Call {
  get inputs(): RepayCall__Inputs {
    return new RepayCall__Inputs(this);
  }

  get outputs(): RepayCall__Outputs {
    return new RepayCall__Outputs(this);
  }
}

export class RepayCall__Inputs {
  _call: RepayCall;

  constructor(call: RepayCall) {
    this._call = call;
  }

  get onBehalfOf(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class RepayCall__Outputs {
  _call: RepayCall;

  constructor(call: RepayCall) {
    this._call = call;
  }
}

export class SetFeeShareCall extends ethereum.Call {
  get inputs(): SetFeeShareCall__Inputs {
    return new SetFeeShareCall__Inputs(this);
  }

  get outputs(): SetFeeShareCall__Outputs {
    return new SetFeeShareCall__Outputs(this);
  }
}

export class SetFeeShareCall__Inputs {
  _call: SetFeeShareCall;

  constructor(call: SetFeeShareCall) {
    this._call = call;
  }

  get newFeeShareBps(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class SetFeeShareCall__Outputs {
  _call: SetFeeShareCall;

  constructor(call: SetFeeShareCall) {
    this._call = call;
  }
}

export class SetGovernanceCall extends ethereum.Call {
  get inputs(): SetGovernanceCall__Inputs {
    return new SetGovernanceCall__Inputs(this);
  }

  get outputs(): SetGovernanceCall__Outputs {
    return new SetGovernanceCall__Outputs(this);
  }
}

export class SetGovernanceCall__Inputs {
  _call: SetGovernanceCall;

  constructor(call: SetGovernanceCall) {
    this._call = call;
  }

  get _governance(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetGovernanceCall__Outputs {
  _call: SetGovernanceCall;

  constructor(call: SetGovernanceCall) {
    this._call = call;
  }
}

export class SetKeeperRateCall extends ethereum.Call {
  get inputs(): SetKeeperRateCall__Inputs {
    return new SetKeeperRateCall__Inputs(this);
  }

  get outputs(): SetKeeperRateCall__Outputs {
    return new SetKeeperRateCall__Outputs(this);
  }
}

export class SetKeeperRateCall__Inputs {
  _call: SetKeeperRateCall;

  constructor(call: SetKeeperRateCall) {
    this._call = call;
  }

  get newRate(): i32 {
    return this._call.inputValues[0].value.toI32();
  }
}

export class SetKeeperRateCall__Outputs {
  _call: SetKeeperRateCall;

  constructor(call: SetKeeperRateCall) {
    this._call = call;
  }
}

export class SetLidoRebaseTimeCall extends ethereum.Call {
  get inputs(): SetLidoRebaseTimeCall__Inputs {
    return new SetLidoRebaseTimeCall__Inputs(this);
  }

  get outputs(): SetLidoRebaseTimeCall__Outputs {
    return new SetLidoRebaseTimeCall__Outputs(this);
  }
}

export class SetLidoRebaseTimeCall__Inputs {
  _call: SetLidoRebaseTimeCall;

  constructor(call: SetLidoRebaseTimeCall) {
    this._call = call;
  }

  get _time(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class SetLidoRebaseTimeCall__Outputs {
  _call: SetLidoRebaseTimeCall;

  constructor(call: SetLidoRebaseTimeCall) {
    this._call = call;
  }
}

export class SetMinCollateralRatioCall extends ethereum.Call {
  get inputs(): SetMinCollateralRatioCall__Inputs {
    return new SetMinCollateralRatioCall__Inputs(this);
  }

  get outputs(): SetMinCollateralRatioCall__Outputs {
    return new SetMinCollateralRatioCall__Outputs(this);
  }
}

export class SetMinCollateralRatioCall__Inputs {
  _call: SetMinCollateralRatioCall;

  constructor(call: SetMinCollateralRatioCall) {
    this._call = call;
  }

  get newRatio(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class SetMinCollateralRatioCall__Outputs {
  _call: SetMinCollateralRatioCall;

  constructor(call: SetMinCollateralRatioCall) {
    this._call = call;
  }
}

export class WithdrawCall extends ethereum.Call {
  get inputs(): WithdrawCall__Inputs {
    return new WithdrawCall__Inputs(this);
  }

  get outputs(): WithdrawCall__Outputs {
    return new WithdrawCall__Outputs(this);
  }
}

export class WithdrawCall__Inputs {
  _call: WithdrawCall;

  constructor(call: WithdrawCall) {
    this._call = call;
  }

  get onBehalfOf(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class WithdrawCall__Outputs {
  _call: WithdrawCall;

  constructor(call: WithdrawCall) {
    this._call = call;
  }
}
