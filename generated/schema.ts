// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Bytes,
  BigInt,
  BigDecimal,
} from "@graphprotocol/graph-ts";

export class Borrower extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Borrower entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type Borrower must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`,
      );
      store.set("Borrower", id.toString(), this);
    }
  }

  static loadInBlock(id: string): Borrower | null {
    return changetype<Borrower | null>(store.get_in_block("Borrower", id));
  }

  static load(id: string): Borrower | null {
    return changetype<Borrower | null>(store.get("Borrower", id));
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get debt(): BigInt {
    let value = this.get("debt");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set debt(value: BigInt) {
    this.set("debt", Value.fromBigInt(value));
  }

  get collateral(): BigInt {
    let value = this.get("collateral");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set collateral(value: BigInt) {
    this.set("collateral", Value.fromBigInt(value));
  }

  get collateralRatio(): BigDecimal {
    let value = this.get("collateralRatio");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigDecimal();
    }
  }

  set collateralRatio(value: BigDecimal) {
    this.set("collateralRatio", Value.fromBigDecimal(value));
  }

  get isRedemptionProvider(): boolean {
    let value = this.get("isRedemptionProvider");
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set isRedemptionProvider(value: boolean) {
    this.set("isRedemptionProvider", Value.fromBoolean(value));
  }

  get redemptionFeeRate(): BigInt | null {
    let value = this.get("redemptionFeeRate");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set redemptionFeeRate(value: BigInt | null) {
    if (!value) {
      this.unset("redemptionFeeRate");
    } else {
      this.set("redemptionFeeRate", Value.fromBigInt(<BigInt>value));
    }
  }

  get redemptionAmount(): BigInt | null {
    let value = this.get("redemptionAmount");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set redemptionAmount(value: BigInt | null) {
    if (!value) {
      this.unset("redemptionAmount");
    } else {
      this.set("redemptionAmount", Value.fromBigInt(<BigInt>value));
    }
  }
}
